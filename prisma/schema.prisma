// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated-dto"
  outputToNestJsResourceStructure = "true"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "false"
  fileNamingStyle                 = "kebab"
  noDependencies                  = "false"
  outputType                      = "class"
  prettier                        = "true"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  user
  admin
  teacher
}

enum ContentStatus {
  draft
  published
  private
  deleted
}

enum AuthProvider {
  local
  google
  facebook
}

enum PaymentType {
  bank
  momo
  zalopay
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum SkillType {
  listening
  reading
  writing
  speaking
}

enum LessonType {
  practice
  test
}

enum SubmissionStatus {
  draft
  submitted
  completed
  scored
}

enum NotificationType {
  system
  advertisement
  submission
  comment_reply
  comment_mention
}

enum ReactionType {
  like
  teacher_heart
}

enum TokenTransactionType {
  purchase
  submission_fee
  ai_chat_fee
  upgrade_suggestion_fee
  reward
}

enum FeatureCode {
  submission
  ai_chat
  upgrade_suggestion
}

// Models
model ReferenceData {
  id         String   @id @default(uuid()) @db.Uuid
  type       String // 'language', 'level', 'target', 'topic'
  code       String // ENGLISH, BEGINNER, BUSINESS,...
  name       String
  metadata   Json? // Metadata t√πy theo type
  isActive   Boolean  @default(true) @map("is_active")
  orderIndex Int      @default(0) @map("order_index")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  lessons Lesson[]

  @@unique([type, code])
  @@index([type, isActive, orderIndex])
  @@map("reference_data")
}

model User {
  id              String       @id @default(uuid()) @db.Uuid
  username        String       @unique
  email           String       @unique
  passwordHash    String       @map("password_hash")
  role            UserRole     @default(user)
  authProvider    AuthProvider @default(local) @map("auth_provider")
  authProviderId  String?      @map("auth_provider_id")
  firstName       String?      @map("first_name")
  lastName        String?      @map("last_name")
  profilePicture  String?      @map("profile_picture")
  isEmailVerified Boolean      @default(false) @map("is_email_verified")
  lastLogin       DateTime?    @map("last_login")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  deletedAt       DateTime?    @map("deleted_at")

  teacherProfile       TeacherProfile?
  studentProfile       StudentProfile?
  lessons              Lesson[]
  submissions          LessonSubmission[]   @relation("UserSubmissions")
  gradedSubmissions    LessonSubmission[]   @relation("TeacherGraded")
  vocabularies         Vocabulary[]
  comments             Comment[]
  reactions            CommentReaction[]
  notifications        Notification[]       @relation("UserNotifications")
  createdNotifications Notification[]       @relation("NotificationCreator")
  tokenTransactions    TokenTransaction[]
  VocabularyPractice   VocabularyPractice[]

  @@index([deletedAt, role])
  @@index([email])
}

model TeacherProfile {
  id                 String      @id @default(uuid()) @db.Uuid
  userId             String      @unique @map("user_id") @db.Uuid
  specialization     SkillType[]
  qualification      String?     @db.Text
  teachingExperience Int?        @map("teaching_experience")
  hourlyRate         Decimal?    @map("hourly_rate")
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  deletedAt          DateTime?   @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@map("teacher_profile")
}

model StudentProfile {
  id                  String    @id @default(uuid()) @db.Uuid
  userId              String    @unique @map("user_id") @db.Uuid
  targetStudyDuration Int?      @map("target_study_duration")
  targetReading       Float?    @map("target_reading")
  targetListening     Float?    @map("target_listening")
  targetWriting       Float?    @map("target_writing")
  targetSpeaking      Float?    @map("target_speaking")
  nextExamDate        DateTime? @map("next_exam_date")
  tokensBalance       Int       @default(0) @map("tokens_balance")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  deletedAt           DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@map("student_profile")
}

model Lesson {
  id          String        @id @default(uuid()) @db.Uuid
  skill       SkillType
  title       String
  description String?       @db.Text
  lessonType  LessonType    @map("lesson_type")
  level       String
  levelType   String        @map("level_type")
  topic       String
  timeLimit   Int?          @map("time_limit")
  content     Json?
  status      ContentStatus @default(draft)
  createdById String        @map("created_by") @db.Uuid
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")

  createdBy   User               @relation(fields: [createdById], references: [id])
  submissions LessonSubmission[]
  levelRef    ReferenceData      @relation(fields: [levelType, level], references: [type, code])

  @@index([skill, status, deletedAt])
  @@index([level, topic])
  @@index([createdById])
  @@map("lesson")
}

model LessonSubmission {
  id             String           @id @default(uuid()) @db.Uuid
  userId         String           @map("user_id") @db.Uuid
  lessonId       String           @map("lesson_id") @db.Uuid
  submissionType SkillType        @map("submission_type")
  status         SubmissionStatus @default(draft)
  content        Json?
  feedback       Json?
  tokensUsed     Int              @default(0) @map("tokens_used")
  submittedAt    DateTime?        @map("submitted_at")
  gradedAt       DateTime?        @map("graded_at")
  gradedById     String?          @map("graded_by") @db.Uuid
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  user     User   @relation("UserSubmissions", fields: [userId], references: [id], onDelete: NoAction)
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: NoAction)
  gradedBy User?  @relation("TeacherGraded", fields: [gradedById], references: [id], onDelete: NoAction)

  @@index([userId, lessonId])
  @@index([status, submissionType])
  @@map("lesson_submission")
}

model Vocabulary {
  id              String    @id @default(uuid()) @db.Uuid
  term            String
  meaning         String[]
  exampleSentence String?   @map("example_sentence") @db.Text
  imageUrl        String?   @map("image_url")
  referenceLink   String?   @map("reference_link")
  referenceName   String?   @map("reference_name")
  tags            String[]
  repetitionLevel Int       @default(0) @map("repetition_level")
  nextReview      DateTime? @map("next_review")
  createdById     String    @map("created_by") @db.Uuid
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  createdBy User                 @relation(fields: [createdById], references: [id])
  practices VocabularyPractice[]

  @@index([term])
  @@index([createdById])
  @@index([nextReview])
  @@map("vocabulary")
}

model VocabularyPractice {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  vocabularyId  String    @map("vocabulary_id") @db.Uuid
  successRate   Float?    @map("success_rate")
  lastPracticed DateTime? @map("last_practiced")
  nextReview    DateTime? @map("next_review")
  createdAt     DateTime  @default(now()) @map("created_at")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  vocabulary Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)

  @@unique([userId, vocabularyId])
  @@index([nextReview])
  @@map("vocabulary_practice")
}

model Comment {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  parentId  String?   @map("parent_id") @db.Uuid
  entityId  String    @map("entity_id")
  content   String    @db.Text
  isEdited  Boolean   @default(false) @map("is_edited")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user      User              @relation(fields: [userId], references: [id], onDelete: NoAction)
  parent    Comment?          @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[]         @relation("CommentReplies")
  reactions CommentReaction[]

  @@index([entityId])
  @@index([parentId])
  @@index([userId])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("comment")
}

model CommentReaction {
  id        String       @id @default(uuid()) @db.Uuid
  commentId String       @map("comment_id") @db.Uuid
  userId    String       @map("user_id") @db.Uuid
  type      ReactionType
  createdAt DateTime     @default(now()) @map("created_at")

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, type])
  @@map("comment_reaction")
}

model Notification {
  id           String           @id @default(uuid()) @db.Uuid
  type         NotificationType
  title        String
  content      String           @db.Text
  thumbnailUrl String?          @map("thumbnail_url")
  actionUrl    String?          @map("action_url")
  isGlobal     Boolean          @default(false) @map("is_global")
  userId       String?          @map("user_id") @db.Uuid
  isRead       Boolean          @default(false) @map("is_read")
  createdById  String           @map("created_by") @db.Uuid
  createdAt    DateTime         @default(now()) @map("created_at")
  expiresAt    DateTime?        @map("expires_at")

  user      User? @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  createdBy User  @relation("NotificationCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([type, userId])
  @@index([isGlobal])
  @@index([createdAt])
  @@map("notification")
}

model TokenTransaction {
  id            String               @id @default(uuid()) @db.Uuid
  userId        String               @map("user_id") @db.Uuid
  amount        Int
  type          TokenTransactionType
  paymentMethod PaymentType?         @map("payment_method")
  status        PaymentStatus
  transactionId String?              @map("transaction_id")
  discountCode  String?              @map("discount_code")
  finalAmount   Int                  @map("final_amount")
  createdAt     DateTime             @default(now()) @map("created_at")

  user     User          @relation(fields: [userId], references: [id], onDelete: NoAction)
  discount DiscountCode? @relation(fields: [discountCode], references: [code])

  @@index([userId])
  @@index([status])
  @@index([type])
  @@map("token_transaction")
}

model DiscountCode {
  id           String   @id @default(uuid()) @db.Uuid
  code         String   @unique
  amount       Int
  value        Float
  isPercentage Boolean  @default(false) @map("is_percentage")
  usageLimit   Int      @map("usage_limit")
  currentUsage Int      @default(0) @map("current_usage")
  startDate    DateTime @map("start_date")
  endDate      DateTime @map("end_date")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  transactions TokenTransaction[]

  @@index([code])
  @@map("discount_code")
}

model FeatureTokenConfig {
  id           String      @id @default(uuid()) @db.Uuid
  featureCode  FeatureCode @unique @map("feature_code")
  tokenCost    Int         @map("token_cost")
  isPercentage Boolean     @default(false) @map("is_percentage")
  description  String?
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("feature_token_config")
}

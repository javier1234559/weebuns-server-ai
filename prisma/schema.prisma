// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src/generated-dto"
//   outputToNestJsResourceStructure = "true"
//   flatResourceStructure           = "false"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = ""
//   classValidation                 = "false"
//   fileNamingStyle                 = "kebab"
//   noDependencies                  = "false"
//   outputType                      = "class"
//   prettier                        = "true"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  user
  admin
  teacher
}

enum ContentStatus {
  draft
  published
  private
  deleted
}

enum AuthProvider {
  local
  google
  facebook
}

enum PaymentType {
  bank
  momo
  zalopay
  internal
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum SkillType {
  listening
  reading
  writing
  speaking
}

enum LessonType {
  practice
  test
}

enum SubmissionStatus {
  draft
  submitted
  taken
  scored
}

enum NotificationType {
  system
  advertisement
  submission
  comment_reply
  comment_mention
}

enum ReactionType {
  like
  teacher_heart
}

// Models
model ReferenceData {
  id         String   @id @default(uuid()) @db.Uuid
  type       String // 'language', 'level', 'target', 'topic'
  code       String   @unique // ENGLISH, BEGINNER, BUSINESS,...
  name       String
  metadata   Json? // Metadata t√πy theo type
  isActive   Boolean  @default(true) @map("is_active")
  orderIndex Int      @default(0) @map("order_index")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  lessons    Lesson[] @relation("LessonLevel")
  topics     Lesson[] @relation("LessonTopic")

  @@unique([type, code])
  @@index([type, isActive, orderIndex])
  @@map("reference_data")
}

model User {
  id              String       @id @default(uuid()) @db.Uuid
  username        String       @unique
  email           String       @unique
  passwordHash    String       @map("password_hash")
  role            UserRole     @default(user)
  authProvider    AuthProvider @default(local) @map("auth_provider")
  authProviderId  String?      @map("auth_provider_id")
  firstName       String?      @map("first_name")
  lastName        String?      @map("last_name")
  profilePicture  String?      @map("profile_picture")
  bio             String?      @map("bio")
  isEmailVerified Boolean      @default(false) @map("is_email_verified")
  lastLogin       DateTime?    @map("last_login")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  deletedAt       DateTime?    @map("deleted_at")

  teacherProfile       TeacherProfile?
  studentProfile       StudentProfile?
  lessons              Lesson[]
  submissions          LessonSubmission[]   @relation("UserSubmissions")
  gradedSubmissions    LessonSubmission[]   @relation("TeacherGraded")
  vocabularies         Vocabulary[]
  comments             Comment[]
  reactions            CommentReaction[]
  notifications        Notification[]       @relation("UserNotifications")
  createdNotifications Notification[]       @relation("NotificationCreator")
  VocabularyPractice   VocabularyPractice[]
  StudyActivity        StudyActivity[]
  TokenWallet          TokenWallet?
  Transaction          Transaction[]

  @@index([deletedAt, role])
  @@index([email])
}

model TeacherProfile {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @map("user_id") @db.Uuid

  longBio            String? @map("long_bio")
  introVideoUrlEmbed String? @map("intro_video_url_embed")
  certifications     String? @map("certifications")
  teachingExperience String? @map("teaching_experience")
  other              String? @map("other")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@map("teacher_profile")
}

model StudentProfile {
  id                  String    @id @default(uuid()) @db.Uuid
  userId              String    @unique @map("user_id") @db.Uuid
  targetStudyDuration Int?      @map("target_study_duration")
  targetReading       Float?    @map("target_reading")
  targetListening     Float?    @map("target_listening")
  targetWriting       Float?    @map("target_writing")
  targetSpeaking      Float?    @map("target_speaking")
  nextExamDate        DateTime? @map("next_exam_date")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  deletedAt           DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@map("student_profile")
}

model Lesson {
  id           String        @id @default(uuid()) @db.Uuid
  skill        SkillType
  title        String
  description  String?
  lessonType   LessonType
  level        String        @map("level_code") // Reference to reference_data
  topic        String        @map("topic_code") // Reference to reference_data
  timeLimit    Int?          @map("time_limit")
  content      Json // Structured based on skill_type
  thumbnailUrl String?       @map("thumbnail_url")
  tags         String[]      @default([])
  status       ContentStatus @default(draft)
  createdById  String        @map("created_by") @db.Uuid
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")

  // Relations
  createdBy   User               @relation(fields: [createdById], references: [id])
  levelRef    ReferenceData      @relation("LessonLevel", fields: [level], references: [code])
  topicRef    ReferenceData      @relation("LessonTopic", fields: [topic], references: [code])
  submissions LessonSubmission[]

  @@index([skill, status, deletedAt])
  @@index([level, topic])
  @@index([createdById])
}

model LessonSubmission {
  id             String           @id @default(uuid()) @db.Uuid
  lessonId       String           @map("lesson_id") @db.Uuid
  userId         String           @map("user_id") @db.Uuid
  submissionType SkillType        @default(writing) @map("submission_type")
  status         SubmissionStatus @default(draft)
  content        Json? // User's submission content
  feedback       Json? // Teacher's feedback structure
  tokensUsed     Int              @default(0) @map("tokens_used")
  submittedAt    DateTime?        @map("submitted_at")
  gradedAt       DateTime?        @map("graded_at")
  gradedById     String?          @map("graded_by") @db.Uuid
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")

  // Relations
  lesson   Lesson    @relation(fields: [lessonId], references: [id])
  user     User      @relation("UserSubmissions", fields: [userId], references: [id])
  gradedBy User?     @relation("TeacherGraded", fields: [gradedById], references: [id])
  comments Comment[]

  @@index([lessonId, userId])
  @@index([status, submittedAt])
  @@index([gradedById, gradedAt])
}

model Vocabulary {
  id              String    @id @default(uuid()) @db.Uuid
  term            String
  meaning         String[]
  exampleSentence String?   @map("example_sentence") @db.Text
  imageUrl        String?   @map("image_url")
  referenceLink   String?   @map("reference_link")
  referenceName   String?   @map("reference_name")
  repetitionLevel Int       @default(0) @map("repetition_level")
  nextReview      DateTime? @map("next_review")
  createdById     String    @map("created_by") @db.Uuid
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  createdBy User                 @relation(fields: [createdById], references: [id])
  practices VocabularyPractice[]

  @@index([term])
  @@index([createdById])
  @@index([nextReview])
  @@map("vocabulary")
}

model VocabularyPractice {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  vocabularyId  String    @map("vocabulary_id") @db.Uuid
  successRate   Float?    @map("success_rate")
  lastPracticed DateTime? @map("last_practiced")
  nextReview    DateTime? @map("next_review")
  createdAt     DateTime  @default(now()) @map("created_at")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  vocabulary Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)

  @@unique([userId, vocabularyId])
  @@index([nextReview])
  @@map("vocabulary_practice")
}

model Comment {
  id           String    @id @default(uuid()) @db.Uuid
  identifierId String    @map("identifier_id")
  userId       String    @map("user_id") @db.Uuid
  content      String
  parentId     String?   @map("parent_id") @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  // Relations
  user               User              @relation(fields: [userId], references: [id])
  parent             Comment?          @relation("CommentReplies", fields: [parentId], references: [id])
  replies            Comment[]         @relation("CommentReplies")
  reactions          CommentReaction[]
  LessonSubmission   LessonSubmission? @relation(fields: [lessonSubmissionId], references: [id])
  lessonSubmissionId String?           @db.Uuid

  @@index([identifierId])
  @@index([userId])
  @@index([parentId])
}

model CommentReaction {
  id        String       @id @default(uuid()) @db.Uuid
  commentId String       @map("comment_id") @db.Uuid
  userId    String       @map("user_id") @db.Uuid
  type      ReactionType
  createdAt DateTime     @default(now()) @map("created_at")

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, type])
  @@map("comment_reaction")
}

model Notification {
  id           String           @id @default(uuid()) @db.Uuid
  type         NotificationType
  title        String
  content      String           @db.Text
  thumbnailUrl String?          @map("thumbnail_url")
  actionUrl    String?          @map("action_url")
  isGlobal     Boolean          @default(false) @map("is_global")
  userId       String?          @map("user_id") @db.Uuid
  isRead       Boolean          @default(false) @map("is_read")
  createdById  String           @map("created_by") @db.Uuid
  createdAt    DateTime         @default(now()) @map("created_at")
  expiresAt    DateTime?        @map("expires_at")

  user      User? @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  createdBy User  @relation("NotificationCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([type, userId])
  @@index([isGlobal])
  @@index([createdAt])
  @@map("notification")
}

model TokenWallet {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @unique @map("user_id") @db.Uuid
  balance   Int       @default(0)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@map("token_wallet")
}

model TokenPackage {
  id               String   @id @default(uuid()) @db.Uuid
  code             String   @unique // small, standard, savings
  name             String
  tokens           Int
  price            Int      @map("price_vnd")
  pricePerToken    Int      @map("price_per_token")
  oldPricePerToken Int?     @map("old_price_per_token")
  message          String?
  popular          Boolean  @default(false)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  transactions Transaction[]

  @@map("token_package")
}

model Transaction {
  id            String        @id @default(uuid()) @db.Uuid
  userId        String        @map("user_id") @db.Uuid
  packageId     String?       @map("package_id") @db.Uuid
  amount        Int           @map("amount_vnd")
  tokenAmount   Int           @map("token_amount")
  paymentType   PaymentType
  transactionId String        @unique @map("transaction_id")
  status        PaymentStatus
  paymentDate   DateTime      @map("payment_date")
  currency      String        @default("VND")
  type          String        @map("transaction_type") // "token_purchase" | "token_use"
  reason        String?       @map("reason")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  package TokenPackage? @relation(fields: [packageId], references: [id])
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([paymentDate])
  @@map("transaction")
}

model StudyActivity {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  date         DateTime @map("activity_date")
  reading      Int      @default(0)
  listening    Int      @default(0)
  writing      Int      @default(0)
  speaking     Int      @default(0)
  totalMinutes Int      @default(0) @map("total_minutes")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("study_activity")
}
